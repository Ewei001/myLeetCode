因为之前看到过相关的文章，所以首先想到的是如下解法，但是LeetCode并没有通过。
基本思想是：当有n个台阶时，最后一步可以是1步或者2步，当为1步时有F(n-1)种走法，当为2步时有F(n-2)
因此有F(n) = F(n - 1) + F(n - 2)
if(n < 1) return 0;
if(n == 1) return 1;
if(n == 2) return 2;
return climbStairs(n - 1) + climbStairs(n - 2);

方法二：备忘录方法
使用F(n) = F(n - 1) + F(n - 2)时，每一层都会有很多重复的工作
比如F(n - 1) = F(n - 2) + F(n - 3)，这里的F(n - 2)就有重复，随着递归层次越来越多，冗余就越来越多。
对于这种方法可以用缓存，创建一个hash,每次计算前线判断map中是否有该参数，有则直接查询出，无则计算再存入。
这样就避免了重复计算。

方法三：动态规划，将以上的思想逆转过来
以上方法是从n开始向下递归
可以考虑下自底向上：即每次只保留前两次的结果，当下的结果为前两次的结果之和。
public int climbStairs(int n) {
	if(n <= 2) return n;
	int oneStepBefore = 2;
	int twoStepBefore = 1;
	int curValue = 0;
	while(n >= 3){
		curValue = oneStepBefore + twoStepBefore;
		twoStepBefore = oneStepBefore;
		oneStepBefore = curValue;
		n--;
	}
	return curValue;
} 