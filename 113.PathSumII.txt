这道题是112的升级版本，只不过这个不用返回值，而是把所有满足条件的存到list中。
开始自己思考的时候也是想着借助重载函数递归，每次多传递一个参数List<Integer> cur,遇到root!=null就cur.add(root.val)
然后再全局变量出定义一个List<List<Integer>> result，满足条件时，就result.add(cur),
但是发现每个递归都会自动cur中加入数据，这样最后加入result中的cur就不是我想要的结果了。
于是就去讨论区看了一下别人的答案。就是每次递归结束后都会把当前层次的值remove掉。
其实discuss区使用的是LinkedList,这里我改成了ArrayList,因为虽然一般情况下插入删除使用LinkedList会比较好（因为ArrayList要移动多个元素）
但是本题的情况是每次remove的都是最后一个节点，因此如果用LinkedList还需要遍历到最后一个节点，而ArrayListke可以直接通过下表找到最后的节点，因此速度回更快。

class Solution {
    public List<List<Integer>> pathSum(TreeNode root, int sum){
        List<List<Integer>> result  = new ArrayList<List<Integer>>();
        List<Integer> currentResult  = new ArrayList<Integer>();
        pathSum(root,sum,currentResult,result);
        return result;
    }

    public void pathSum(TreeNode root, int sum, List<Integer> currentResult,
            List<List<Integer>> result) {

        if (root == null)
            return;
        currentResult.add(new Integer(root.val));
        if (root.left == null && root.right == null && sum == root.val) {
            result.add(new ArrayList(currentResult));
            currentResult.remove(currentResult.size() - 1);//don't forget to remove the last integer
            return;
        } else {
            pathSum(root.left, sum - root.val, currentResult, result);
            pathSum(root.right, sum - root.val, currentResult, result);
        }
        currentResult.remove(currentResult.size() - 1);
    }
}

当然还有一种比较好理解的方法，但是开销会有点大，就是每次递归时都新建一个List,这样每次加入result中的curList就是不相干的，因此也不用remove.
