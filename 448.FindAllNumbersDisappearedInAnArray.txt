方法一：
思路： 将数组数据存在一个set中，再从1到n遍历看set中是否存在，不存在则添加到list中。最后返回list.
public List<Integer> findDisappearedNumbers(int[] nums) {
	Set<Integer> set = new HashSet<Integer>();
	List<Integer> list = new ArrayList<Integer>();
	if(nums.length == 0) return list;
	
	for(int i = 0; i < nums.length; i++){
		set.add(nums[i]);
	}
	for(int i = 1; i <= nums.length; i++){
		if(!set.contains(i)) list.add(i);
	}
	return list;
}
方法二：遍历数组中每一个数值，并映射到对应下标，并将该下标值换位负值，最后再遍历修改后的数组，若当前值不小于0，则说明此下标原数组中没有对应值，并将下标+1存入list.
public List<Integer> findDisappearedNumbers(int[] nums) {
	List<Integer> ret = new ArrayList<Integer>();
	
	for(int i = 0; i < nums.length; i++) {
		int val = Math.abs(nums[i]) - 1;
		if(nums[val] > 0) nums[val] = -nums[val];
	}
	
	for(int i = 0; i < nums.length; i++) {
		if(nums[i] > 0) ret.add(i+1);
	}
	return ret;
}