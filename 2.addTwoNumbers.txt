一直通不过，根据错误提示改了快100遍终于通过了，总感觉我写的有些复杂了……

public class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        if(l1 == null || l2 == null) return l1 == null ? l2 : l1;
        int carry = 0;
        ListNode result = new ListNode(0);
        ListNode curNode = result;
        int curVal = 0;
        while(l1 != null || l2 != null){   
            if(l1 != null && l2 != null){
                curVal = ((l1.val + l2.val) % 10 + carry) % 10;
                carry = (l1.val + l2.val + carry) / 10;
            }else if(l1 == null){
                curVal = (l2.val + carry) % 10;
                carry = (l2.val + carry) / 10;
            }else{
                curVal = (l1.val + carry) % 10;
                carry = (l1.val + carry) / 10;
            }            
            ListNode tmp = new ListNode(curVal);
            
            curNode.next = tmp;
            curNode = curNode.next;
            if(l1 != null) l1 = l1.next;
            if(l2 != null) l2 = l2.next;
        }
        if(carry != 0){
            ListNode highNode = new ListNode(carry);
            curNode.next = highNode;
        }
        return result.next;
    }
}//对比了一下下面的代码，发现我写了很多不必要的步骤，增加了代码的冗余度。
根据方案二，只需分步判断l1 != null 时，l2 != null时。当两个条件都成立时，就会将两个当前值都加一遍
忽然感觉自己好蠢……
======================================================================
方案二：
看了一下别人的解答：
public class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode c1 = l1;
        ListNode c2 = l2;
        ListNode sentinel = new ListNode(0);
        ListNode d = sentinel;
        int sum = 0;
        while (c1 != null || c2 != null) {
            sum /= 10;
            if (c1 != null) {
                sum += c1.val;
                c1 = c1.next;
            }
            if (c2 != null) {
                sum += c2.val;
                c2 = c2.next;
            }
            d.next = new ListNode(sum % 10);
            d = d.next;
        }
        if (sum / 10 == 1)
            d.next = new ListNode(1);
        return sentinel.next;
    }
}
